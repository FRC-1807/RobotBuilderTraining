// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1807.Redbird;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController collectorcollection_motor;
    public static SpeedController driveTrainFL;
    public static SpeedController driveTrainBL;
    public static SpeedController driveTrainFR;
    public static SpeedController driveTrainBR;
    public static RobotDrive driveTrainRobotDrive;
    public static Compressor pneumaticsCompressor;
    public static Solenoid pneumaticsCollection_Solenoid;
    public static AnalogInput pneumaticspressure_sensor;
    public static SpeedController elevatorelevator_one;
    public static SpeedController elevatorelevator_two;
    public static AnalogPotentiometer elevatorpot;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        collectorcollection_motor = new Talon(6);
        LiveWindow.addActuator("Collector", "collection_motor", (Talon) collectorcollection_motor);
        collectorcollection_motor.setInverted(false);
        driveTrainFL = new Talon(0);
        LiveWindow.addActuator("DriveTrain", "FL", (Talon) driveTrainFL);
        driveTrainFL.setInverted(false);
        driveTrainBL = new Talon(1);
        LiveWindow.addActuator("DriveTrain", "BL", (Talon) driveTrainBL);
        driveTrainBL.setInverted(false);
        driveTrainFR = new Talon(2);
        LiveWindow.addActuator("DriveTrain", "FR", (Talon) driveTrainFR);
        driveTrainFR.setInverted(false);
        driveTrainBR = new Talon(3);
        LiveWindow.addActuator("DriveTrain", "BR", (Talon) driveTrainBR);
        driveTrainBR.setInverted(false);
        driveTrainRobotDrive = new RobotDrive(driveTrainFL, driveTrainBL,
              driveTrainFR, driveTrainBR);
        
        driveTrainRobotDrive.setSafetyEnabled(true);
        driveTrainRobotDrive.setExpiration(0.1);
        driveTrainRobotDrive.setSensitivity(0.5);
        driveTrainRobotDrive.setMaxOutput(0.5);
        driveTrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, true);
        driveTrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
        driveTrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
        driveTrainRobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
        pneumaticsCompressor = new Compressor(0);
        LiveWindow.addActuator("pneumatics", "Compressor", pneumaticsCompressor);
        
        pneumaticsCollection_Solenoid = new Solenoid(0, 4);
        LiveWindow.addActuator("pneumatics", "Collection_Solenoid", pneumaticsCollection_Solenoid);
        
        pneumaticspressure_sensor = new AnalogInput(1);
        LiveWindow.addSensor("pneumatics", "pressure_sensor", pneumaticspressure_sensor);
        
        elevatorelevator_one = new Talon(9);
        LiveWindow.addActuator("elevator", "elevator_one", (Talon) elevatorelevator_one);
        elevatorelevator_one.setInverted(true);
        elevatorelevator_two = new Talon(7);
        LiveWindow.addActuator("elevator", "elevator_two", (Talon) elevatorelevator_two);
        elevatorelevator_two.setInverted(true);
        elevatorpot = new AnalogPotentiometer(0, 1.0, 0.0);
        LiveWindow.addSensor("elevator", "pot", elevatorpot);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
